import "hashes/sha256/512bitPacked.zok" as sha256packed

// https://zokrates.github.io/sha256example.html#computing-a-hash-using-zokrates
// A field value can only hold 254 bits due to the size of the underlying prime field used by zokrates. 
// Therefore, 256 bit values need to be passed as 2 params of 128 bit values.

// https://zokrates.github.io/concepts/stdlib.html?highlight=sha256#sha256packed
// At the time of writing sha256packed takes 4 field elements as inputs, unpacks each of them to 128 bits (big endian), concatenates them and applies sha256. 
// It then returns two field elements, each representing 128 bits of the result.

// Public inputs
// onh0 + onh1: Hash of the note (secret note)
// nn1h0 + nn1h1: Hash of the new note 1
// nn2h0 + nn1h1: Hash of the new note 2

// Private inputs
// ona + onb: secret key of the sender
// onc + ond: (256 bits) representing the value of the note to be spent

// nn1a + nn1b: public key of the receiver
// nn1c + nn1d: the value of the note to be sent

// nn2c + nn2d: leftover change
def main(field onh0, field onh1, private field ona, private field onb, private field onc, private field ond, field nn1h0, field nn1h1, private field nn1a, private field nn1b, private field nn1c, private field nn1d, field nn2h0, field nn2h1, private field nn2c, private field nn2d) -> (field):
    // get public key corresponding to private key
    // too complex to implement for the hackathon :p - so sending in the public key instead

    // pka und pkb zusammen sind der secret key des Senders
    field pka = ona
    field pkb = onb

    // old note
    // besteht aus dem secret key des senders (pka und pkb) und dem gesendetem Wert (onc und ond)
    field[2] h0 = sha256packed([pka, pkb, onc, ond])

    // verify with public input (hash of the note)
    // Ist der berechnete Hash der selbe wie im public input
    assert(h0[0] == onh0) 
    assert(h0[1] == onh1)

    // new note 1 that goes to pkreciever
    field[2] h1 = sha256packed([nn1a, nn1b, nn1c, nn1d])
    assert(h1[0] == nn1h0)
    assert(h1[1] == nn1h1)

    // new note (left over change) that goes back to sender (pk)
    field[2] h2 = sha256packed([pka, pkb, nn2c, nn2d])
    assert(h2[0] == nn2h0)
    assert(h2[1] == nn2h1)

    // check if spent value is equal to sent value + leftover change
    // assuming the values fit in 128 bit nums - hence onc, nn1c, nn2c are 0
    assert(ond == nn1d + nn2d) 
    return 1